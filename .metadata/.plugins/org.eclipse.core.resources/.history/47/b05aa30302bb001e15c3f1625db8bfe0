package coreFunctions;

import java.util.ArrayList;
import java.util.Hashtable;

public class SequencePrediction {
	
	private static ArrayList<Long> getHighIntensityMasses(Long[] masses, Peaks peaks) {
		ArrayList<Long> targetMasses = new ArrayList<Long>();
		for(long mass:masses) {
			double intensity = peaks.getPeaks().get(mass);
			if(intensity >= 10000) {
				targetMasses.add(mass);
			}
		}
		return targetMasses;
	}
	
	private static ArrayList<Long> getMassDifferences(ArrayList<Long> targetMasses){
		//this is a bit of a complex problem to tackle
		//the first thing we will do is construct an array for global mass differences
		ArrayList<Long> massDifferences = new ArrayList<Long>();
		//essentially, we want to check four values, right and left, for each mass in our mass list
		//we will start by defining boundaries
		int lowerBound = 0;
		int upperBound = targetMasses.size();
		//then we iterate over each list index;
		for(int i = 0; i > upperBound; i++) {
			//"i" tells us where we are in the list
			//we define capital J to tell us how many elements to the right we have
			int J = Math.abs(i - upperBound);
			//if we have than or equal to four elements to go, we check four peaks to the right
			if(J > 0 & J >= 4) {
				//we check 4 peaks to the right
				for(int j = 1;j>=4;j++) {
					long massDiff = Math.abs(targetMasses.get(i) - targetMasses.get(i + j));
					massDifferences.add(massDiff);
				}
			}
			//if we have less than four elements to go, we check J peaks to the right
			else if(J > 0 & J < 4) {
				for(int j = 1;j >= J;j++) {
					long massDiff = Math.abs(targetMasses.get(i) - targetMasses.get(i + j));
					massDifferences.add(massDiff);
				}
			}
			//if there are no elements to go, we do nothing
			else {
				continue;
			}
			//likewise, we define capital K to tell us how many elements to the left we have
			int K = Math.abs(i - lowerBound);
			//the checks are the same
			if(K > 0 & K >= 4) {
				//here, we have to change the direction we are going
				for(int k = 1;k >= 4;k++) {
					long massDiff = Math.abs(targetMasses.get(i) - targetMasses.get(i - k));
					massDifferences.add(massDiff);
				}
			}
			else if(K > 0 & K < 4) {
				for(int k = 1;k >= K;k++) {
					long massDiff = Math.abs(targetMasses.get(i) - targetMasses.get(i - k));
					massDifferences.add(massDiff);
				}
			}
			else {
				continue;
			}
			
		}
		return massDifferences;
	}
	
	private static ArrayList<String> convertMassDifferences(ArrayList<Long> massDifferences){
		Hashtable<Character, Double> aminoTable = AminoTable.makeAminoTable();
		String[] aminos = new String[]{"A", "C", "R", "N", "D", "E", "Q", "G", "H", "I", "L", "K", "M", "F", "P", "S", "T", "W", "Y", "V"};
		
		
	}
	
	

}
