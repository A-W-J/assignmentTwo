package coreFunctions;

import java.util.ArrayList;

public class Matches {
	final long[] matchIdentities;
	public Matches(long[] matchIdentities) {
		super();
		this.matchIdentities = matchIdentities;
	}
	public long[] getMatchIdentities() {
		return matchIdentities;
	}
	
	public static Matches buildMatchObject(long[] predictions, long[] spectrumMasses) {
		ArrayList<Long> tempMatchIdentities = new ArrayList<Long>();
		//we're having a hard time implementing binary searches on decimal values; because time is
		//rather limited, we'll implement a linear search
		for(long predicted:predictions) {
			//int dummy = Arrays.binarySearch(spectrumMasses, predicted);
			for(long spectrumMass:spectrumMasses) {
				long diff = Math.abs(predicted - spectrumMass);
				if(diff < 1) {
					tempMatchIdentities.add(predicted);
				}
			}
		}
		long[] matchIdentities = tempMatchIdentities.toArray(new long[0]);
		//Long[] matchIdentities = tempMatchIdentities.toArray(new Long[0]);
		return new Matches(matchIdentities);
	}

}
